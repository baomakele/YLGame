//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class AutoReconnectControllerWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(AutoReconnectController), typeof(System.Object));
		L.RegFunction("Init", Init);
		L.RegFunction("New", _CreateAutoReconnectController);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("StartReconnect", get_StartReconnect, set_StartReconnect);
		L.RegVar("EndReconnect", get_EndReconnect, set_EndReconnect);
		L.RegVar("Open", get_Open, set_Open);
		L.RegVar("DelayTime", get_DelayTime, set_DelayTime);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateAutoReconnectController(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				AutoReconnectController obj = new AutoReconnectController();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: AutoReconnectController.New");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Init(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			AutoReconnectController.Init();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_StartReconnect(IntPtr L)
	{
		try
		{
			ToLua.Push(L, AutoReconnectController.StartReconnect);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_EndReconnect(IntPtr L)
	{
		try
		{
			ToLua.Push(L, AutoReconnectController.EndReconnect);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Open(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushboolean(L, AutoReconnectController.Open);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_DelayTime(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushnumber(L, AutoReconnectController.DelayTime);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_StartReconnect(IntPtr L)
	{
		try
		{
			CallBack arg0 = null;
			LuaTypes funcType2 = LuaDLL.lua_type(L, 2);

			if (funcType2 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (CallBack)ToLua.CheckObject(L, 2, typeof(CallBack));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 2);
				arg0 = DelegateFactory.CreateDelegate(typeof(CallBack), func) as CallBack;
			}

			AutoReconnectController.StartReconnect = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_EndReconnect(IntPtr L)
	{
		try
		{
			CallBack arg0 = null;
			LuaTypes funcType2 = LuaDLL.lua_type(L, 2);

			if (funcType2 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (CallBack)ToLua.CheckObject(L, 2, typeof(CallBack));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 2);
				arg0 = DelegateFactory.CreateDelegate(typeof(CallBack), func) as CallBack;
			}

			AutoReconnectController.EndReconnect = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Open(IntPtr L)
	{
		try
		{
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			AutoReconnectController.Open = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_DelayTime(IntPtr L)
	{
		try
		{
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			AutoReconnectController.DelayTime = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}


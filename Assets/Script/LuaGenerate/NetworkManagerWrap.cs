//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class NetworkManagerWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(NetworkManager), typeof(System.Object));
		L.RegFunction("Init", Init);
		L.RegFunction("RegisterListenNetMsgForLua", RegisterListenNetMsgForLua);
		L.RegFunction("RemoveNetMsgForLua", RemoveNetMsgForLua);
		L.RegFunction("Dispose", Dispose);
		L.RegFunction("SetServer", SetServer);
		L.RegFunction("SetDomain", SetDomain);
		L.RegFunction("Connect", Connect);
		L.RegFunction("DisConnect", DisConnect);
		L.RegFunction("SendMessage", SendMessage);
		L.RegFunction("GetHeartBeatMessage", GetHeartBeatMessage);
		L.RegFunction("New", _CreateNetworkManager);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("s_heatBeat", get_s_heatBeat, set_s_heatBeat);
		L.RegVar("responseForLua", get_responseForLua, set_responseForLua);
		L.RegVar("IsConnect", get_IsConnect, null);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateNetworkManager(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				NetworkManager obj = new NetworkManager();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: NetworkManager.New");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Init(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			string arg0 = ToLua.CheckString(L, 1);
			string arg1 = ToLua.CheckString(L, 2);
			NetworkManager.Init(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RegisterListenNetMsgForLua(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			CallBackNetMsgLua arg0 = null;
			LuaTypes funcType1 = LuaDLL.lua_type(L, 1);

			if (funcType1 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (CallBackNetMsgLua)ToLua.CheckObject(L, 1, typeof(CallBackNetMsgLua));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 1);
				arg0 = DelegateFactory.CreateDelegate(typeof(CallBackNetMsgLua), func) as CallBackNetMsgLua;
			}

			NetworkManager.RegisterListenNetMsgForLua(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RemoveNetMsgForLua(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			NetworkManager.RemoveNetMsgForLua();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Dispose(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			NetworkManager.Dispose();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetServer(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			string arg0 = ToLua.CheckString(L, 1);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
			NetworkManager.SetServer(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetDomain(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			string arg0 = ToLua.CheckString(L, 1);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
			NetworkManager.SetDomain(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Connect(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			NetworkManager.Connect();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int DisConnect(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			NetworkManager.DisConnect();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SendMessage(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1 && TypeChecker.CheckTypes(L, 1, typeof(Google.Protobuf.IMessage)))
			{
				Google.Protobuf.IMessage arg0 = (Google.Protobuf.IMessage)ToLua.ToObject(L, 1);
				NetworkManager.SendMessage(arg0);
				return 0;
			}
			else if (count == 1 && TypeChecker.CheckTypes(L, 1, typeof(byte[])))
			{
				byte[] arg0 = ToLua.CheckByteBuffer(L, 1);
				NetworkManager.SendMessage(arg0);
				return 0;
			}
			else if (count == 1 && TypeChecker.CheckTypes(L, 1, typeof(System.Collections.Generic.Dictionary<string,object>)))
			{
				System.Collections.Generic.Dictionary<string,object> arg0 = (System.Collections.Generic.Dictionary<string,object>)ToLua.ToObject(L, 1);
				NetworkManager.SendMessage(arg0);
				return 0;
			}
			else if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(short), typeof(byte[])))
			{
				short arg0 = (short)LuaDLL.lua_tonumber(L, 1);
				byte[] arg1 = ToLua.CheckByteBuffer(L, 2);
				NetworkManager.SendMessage(arg0, arg1);
				return 0;
			}
			else if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(string), typeof(System.Collections.Generic.Dictionary<string,object>)))
			{
				string arg0 = ToLua.ToString(L, 1);
				System.Collections.Generic.Dictionary<string,object> arg1 = (System.Collections.Generic.Dictionary<string,object>)ToLua.ToObject(L, 2);
				NetworkManager.SendMessage(arg0, arg1);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: NetworkManager.SendMessage");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetHeartBeatMessage(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			bool o = NetworkManager.GetHeartBeatMessage();
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_s_heatBeat(IntPtr L)
	{
		try
		{
			ToLua.PushObject(L, NetworkManager.s_heatBeat);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_responseForLua(IntPtr L)
	{
		try
		{
			ToLua.Push(L, NetworkManager.responseForLua);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_IsConnect(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushboolean(L, NetworkManager.IsConnect);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_s_heatBeat(IntPtr L)
	{
		try
		{
			HeartBeatBase arg0 = (HeartBeatBase)ToLua.CheckObject(L, 2, typeof(HeartBeatBase));
			NetworkManager.s_heatBeat = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_responseForLua(IntPtr L)
	{
		try
		{
			CallBackNetMsgLua arg0 = null;
			LuaTypes funcType2 = LuaDLL.lua_type(L, 2);

			if (funcType2 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (CallBackNetMsgLua)ToLua.CheckObject(L, 2, typeof(CallBackNetMsgLua));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 2);
				arg0 = DelegateFactory.CreateDelegate(typeof(CallBackNetMsgLua), func) as CallBackNetMsgLua;
			}

			NetworkManager.responseForLua = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

